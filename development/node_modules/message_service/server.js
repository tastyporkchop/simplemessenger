// module that listens on a port for sent messages

//var net = require('net');
var http = require('http');
var events = require('events');
var util = require('util');

var parser = require(__dirname + '/message_parser');

var EVENT_RECEIVED_MESSAGE = 'received_message';

// config structure:
// see http://nodejs.org/api/net.html#net_net_createconnection_options_connectionlistener
// {
//     port: 1234,
//     localAddress: '127.0.0.1'
// }


// main way to create a server instance
var createServer = function(config) {
    return new Server(config);
}


var Server = function(config) {
    if(typeof config === 'undefined') config = {localAddress: 0, port: 8124};
    this.config = config;
    
    events.EventEmitter.call(this);
};
util.inherits(Server, events.EventEmitter);


Server.prototype.start = function() {
    var self = this;
    console.log('starting server');
    this.server = http.createServer(function(request, response) { //'request' listener

        request.on('readable' function() {
            var msgtxt = request.read();
            console.log('server received message:' + msgtxt);
            emit('received_message', mstxt);

            response.writeHead(200, {'Content-Type': 'text/plain'});
            response.end('Success\n');
        });
    });

    this.server.on('connection', function(c) {
        console.log('server connected');
    });

    this.server.on('end', function() {
        console.log('server disconnected');
    });


    //this.server = http.createServer(function(c) { //'connection' listener
    //    console.log('server connected');

    //    c.on('end', function() {
    //        console.log('server disconnected');
    //    });

    //    c.on('readable', function() {
    //        messages = parser.parse(c.read());
    //        for(x in messages) {
    //            console.log('server receieved data:'+messages[x]);
    //            self.emit(EVENT_RECEIVED_MESSAGE, messages[x]);
    //        }
    //    });
    //});

    this.server.listen(this.config.port, this.config.localAddress, function() { //'listening' listener
      console.log('server bound');
    });
};

// this will stop new connections from being accepted
// and fire the callback when shutdown is complete
Server.prototype.shutdown = function() {
    console.log('shutting down server');
    this.server.close(function() {
        console.log('shutdown complete');
    });
};

Server.prototype.getServer = function() {
    return this.server;
};


module.exports = {
    createServer: createServer,
    EVENT_RECEIVED_MESSAGE: EVENT_RECEIVED_MESSAGE
};

