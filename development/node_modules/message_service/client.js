var net = require('net');

var queue = require(__dirname + '/queue');
var msgmod = require(__dirname + '/message');

// main way to create a client
var createClient = function(config) {
    return new Client(config);
}

//
var Client = function(config) {
    this.config = config;

    var self = this;

    // connect immediately
    var client = net.createConnection(config, function() {
        console.log('client connected');
    });
    this.client = client;

    this.queue = new queue.Queue();


    // ---
    this.queue.on('enqueue', function() {
        // TODO: The hope is that the message won't dequeue if there's an error sending it.
        // I don't know node.js well enough to say if it will work that way.
        var message = null;
        message = self.queue.peek();
        self.client.write(message.toMessage());
        self.queue.dequeue();
    });

    client.on('data', function(data) {
        console.log(data.toString());
        self.client.end();
    });

    client.on('end', function() {
        console.log('client disconnected');

    });

    client.on('error', function(err) {
        console.error(err);
    });


    // ---
    this.sendMessage = function(message) {
        //client.write(message.toMessage());
        this.queue.enqueue(message);
    }

    this.connect = function() {
        this.client = net.createConnection(this.config, function() {
            console.log('client connected');
        });
        return client;
    }

    // TODO: the goal here is to periodically check the queue for messages that 
    // haven't been successfully delivered
//    this.checkQueue = function() {
//        var message = null;
//        try {
//            message = self.queue.peek();
//            self.client.write(message.toMessage());
//            self.queue.dequeue();
//        } catch(err) {
//            clearInterval(self.interval);
//        }
//    }
//
//    this.interval = setInterval(this.checkQueue(), 10000);
}


module.exports = {
    createClient: createClient
};
